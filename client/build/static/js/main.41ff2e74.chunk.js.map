{"version":3,"sources":["game/game.module.css","game/front.jpg","game/timeMachine.js","game/gameMachine.js","game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","assign","actions","timeMachine","Machine","id","context","maximum","seconds","initial","states","idle","on","START","started","entry","invoke","src","event","callback","onReceive","setInterval","clearInterval","TICK","target","cond","sendParent","STOP","end","type","send","getCards","array","counter","length","index","Math","floor","random","temp","shuffle","reduce","acc","cardName","concat","cardIndex","name","memoryGameMachine","parties","cards","lastRevealedCardId","revealedCards","clock","progress","username","error","ctx","fetch","then","res","json","onDone","onError","requestFailed","RETRY","partiesLoaded","e","data","spawn","withContext","sync","TYPING","PLAY","to","playing","CLOCK_END","REVEAL","revealingFirst","revealingSecond","lastRevealedCard","currentRevealedCard","Object","values","filter","revealed","keys","timeout","setTimeout","clearTimeout","WIN","MATCH","parseInt","NOT_MATCH","winning","method","headers","Accept","body","JSON","stringify","state","waitWinning","after","1500","won","lost","Card","back","flipped","onClick","className","front","alt","style","display","background","width","Leaderboard","leaderboard","map","p","i","row","key","score","Progress","value","color","Game","useMachine","gameRender","timeRender","usernameContainer","onChange","required","button","card","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.41ff2e74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderboard\":\"game_leaderboard__3vT6W\",\"row\":\"game_row__2Wfbu\",\"name\":\"game_name__1KIL6\",\"score\":\"game_score__2DCCq\",\"button\":\"game_button__zI_u4\",\"usernameContainer\":\"game_usernameContainer__2tQIV\"};","module.exports = __webpack_public_path__ + \"static/media/front.b90e17a9.jpg\";","import { Machine, actions, sendParent } from 'xstate';\nconst { assign } = actions;\n\nconst isMax = (context) => context.seconds >= context.maximum;\n\nconst timeMachine = Machine({\n  id: 'watch',\n  context: {\n    maximum: 10,\n    seconds: 0,\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        START: 'started',\n      },\n    },\n    started: {\n      entry: assign({ seconds: 0 }),\n      invoke: {\n        id: 'tick',\n        src: (context, event) => (callback, onReceive) => {\n          const id = setInterval(() => callback('TICK'), 1000);\n          // Perform cleanup\n          return () => clearInterval(id);\n        },\n      },\n      on: {\n        TICK: [\n          { target: 'end', cond: isMax },\n          {\n            target: '',\n            actions: [\n              assign({ seconds: (context) => context.seconds + 1 }),\n              sendParent('CLOCK_TICK'),\n            ],\n          },\n        ],\n        STOP: 'end',\n      },\n    },\n    end: {\n      type: 'final',\n      entry: sendParent('CLOCK_END'),\n    },\n  },\n});\n\nexport default timeMachine;\n","import { Machine, actions, spawn } from 'xstate';\nimport timeMachine from './timeMachine';\nconst { assign, send } = actions;\n\n// taken on : https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\nfunction shuffle(array) {\n  let counter = array.length;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    let index = Math.floor(Math.random() * counter);\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n// more on fetch: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n// TODO: handle status code >= 400 as an error\n\n// GET /parties\nconst fetchParties = (ctx) => fetch('/parties').then((res) => res.json());\n\n// POST /parties\nconst updateParty = (ctx) => {\n  return fetch('/parties', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      username: ctx.username,\n      seconds: ctx.clock.state.context.seconds,\n    }),\n  }).then((res) => res.json());\n};\n\n// in seconds\nconst MAX_TIME = 120;\n\n// 10 items as it will be doubled : 10 * 2 = 20 = 5 row * 4 cols\nconst getCards = () =>\n  shuffle(\n    [\n      'pomme',\n      'banane',\n      'pommeVert',\n      'fraise',\n      'abricot',\n      'grenade',\n      'citron',\n      'citronVert',\n      'peche',\n      'raisin',\n      // 'pasteque',\n      // 'prune',\n      // 'poire',\n      // 'cerise',\n      // 'framboise',\n      // 'mangue',\n      // 'mirabelle',\n      // 'pomme',\n    ]\n      // doubling items\n      .reduce((acc, cardName) => acc.concat(cardName, cardName), []),\n  )\n    // transorm array to map {<cardIndex>:<card>}\n    .reduce(\n      (acc, cardName, cardIndex) => ({\n        ...acc,\n        [cardIndex]: { name: cardName, id: cardIndex },\n      }),\n      {},\n    );\n\nconst memoryGameMachine = Machine({\n  id: 'memory-game',\n  context: {\n    parties: [],\n    cards: getCards(),\n    lastRevealedCardId: null,\n    revealedCards: {},\n    clock: null,\n    progress: 0,\n    username: '',\n    error: '',\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: assign({\n        cards: getCards(),\n        revealedCards: {},\n        clock: null,\n        progress: 0,\n        username: '',\n        error: '',\n        lastRevealedCardId: null,\n      }),\n      invoke: {\n        id: 'fetch-parties',\n        src: fetchParties,\n        onDone: 'partiesLoaded',\n        onError: 'requestFailed',\n      },\n    },\n    requestFailed: {\n      entry: assign({\n        error: (context, event) => 'Une triste erreur est survenue !',\n      }),\n      on: {\n        RETRY: 'idle',\n      },\n    },\n    partiesLoaded: {\n      entry: [\n        assign({\n          parties: (ctx, e) => e.data,\n          clock: (context, event) =>\n            spawn(timeMachine.withContext({ maximum: MAX_TIME }), {\n              sync: true,\n            }),\n        }),\n      ],\n      on: {\n        TYPING: {\n          actions: assign({\n            username: (ctx, e) => e.username,\n          }),\n        },\n        PLAY: {\n          target: 'playing',\n          actions: send('START', { to: (context) => context.clock }),\n        },\n      },\n    },\n    playing: {\n      on: {\n        CLOCK_END: 'lost',\n        REVEAL: 'revealingFirst',\n      },\n    },\n    revealingFirst: {\n      entry: assign({\n        lastRevealedCardId: (ctx, e) => e.id,\n        revealedCards: (ctx, e) => ({\n          ...ctx.revealedCards,\n          [e.id]: true,\n        }),\n      }),\n      on: {\n        REVEAL: 'revealingSecond',\n      },\n    },\n    revealingSecond: {\n      entry: assign({\n        revealedCards: (ctx, e) => ({\n          ...ctx.revealedCards,\n          [e.id]: true,\n        }),\n      }),\n      invoke: {\n        id: 'check-revealed-cards',\n        src: (ctx, e) => (callback, onReceive) => {\n          const lastRevealedCard = ctx.cards[ctx.lastRevealedCardId];\n          const currentRevealedCard = ctx.cards[e.id];\n          // const revealedCards = { ...ctx.revealedCards, [e.id]: true };\n          if (\n            Object.values(ctx.revealedCards).filter((revealed) => revealed)\n              .length === Object.keys(ctx.cards).length\n          ) {\n            return callback('WIN');\n          }\n          if (lastRevealedCard.name === currentRevealedCard.name) {\n            return callback('MATCH');\n          }\n          const timeout = setTimeout(\n            () => callback({ type: 'NOT_MATCH', ...currentRevealedCard }),\n            650,\n          );\n          return () => clearTimeout(timeout);\n        },\n      },\n      on: {\n        WIN: {\n          target: 'winning',\n          actions: assign({\n            progress: 100,\n          }),\n        },\n        MATCH: {\n          target: 'playing',\n          actions: assign({\n            progress: (ctx) =>\n              parseInt(\n                (Object.values(ctx.revealedCards).filter((revealed) => revealed)\n                  .length *\n                  100) /\n                  Object.keys(ctx.cards).length,\n              ),\n            lastRevealedCardId: () => null,\n          }),\n        },\n        NOT_MATCH: {\n          target: 'playing',\n          actions: assign({\n            lastRevealedCardId: (ctx, e) => null,\n            revealedCards: (ctx, e) => {\n              return {\n                ...ctx.revealedCards,\n                [ctx.lastRevealedCardId]: false,\n                [e.id]: false,\n              };\n            },\n          }),\n        },\n      },\n    },\n    winning: {\n      entry: send('STOP', { to: (context) => context.clock }),\n      invoke: {\n        id: 'save-party',\n        src: updateParty,\n        onDone: 'waitWinning',\n        onError: 'requestFailed',\n      },\n    },\n    waitWinning: {\n      after: {\n        // after 1.5 second, transition to won\n        1500: 'won',\n      },\n    },\n    won: {\n      on: {\n        RETRY: 'idle',\n      },\n    },\n    lost: {\n      on: {\n        RETRY: 'idle',\n      },\n    },\n  },\n});\n\nexport default memoryGameMachine;\n","import React from 'react';\nimport { useMachine } from '@xstate/react';\nimport front from './front.jpg';\nimport memoryGameMachine from './gameMachine';\nimport {\n  leaderboard,\n  row,\n  name,\n  score,\n  button,\n  usernameContainer,\n} from './game.module.css';\n\n// @see : https://www.w3schools.com/howto/howto_css_flip_card.asp\nconst Card = ({ back, flipped, onClick }) => {\n  return (\n    <div className={`flip-card ${flipped ? 'flipped' : ''}`} onClick={onClick}>\n      <div className=\"flip-card-inner\">\n        <div className=\"flip-card-front\">\n          <img\n            src={front}\n            alt=\"Avatar\"\n            style={{\n              display: 'block',\n              background: 'lightgray',\n              width: '100px',\n            }}\n          />\n        </div>\n        <div className=\"flip-card-back\">\n          <div className={back} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Leaderboard = ({ parties }) => (\n  <>\n    <h2>Leaderboard</h2>\n    <div className={leaderboard}>\n      {parties.map((p, i) => (\n        <div className={row} key={i}>\n          <div className={name}>{p.username}</div>\n          <div className={score}>{p.seconds}</div>\n        </div>\n      ))}\n    </div>\n  </>\n);\nconst Progress = ({ value }) => (\n  <div style={{ background: '#f1f1f1' }}>\n    <div style={{ color: 'white', background: 'green', width: value + '%' }}>\n      {value}\n    </div>\n  </div>\n);\n\nexport const Game = () => {\n  const [state, send] = useMachine(memoryGameMachine);\n  let gameRender = () => null;\n  let timeRender = () => 0;\n  switch (state.value) {\n    case 'idle': {\n      return <div>Chargement ...</div>;\n    }\n    case 'requestFailed': {\n      return (\n        <div>\n          <p>Une erreur est survenue ! {state.context.error}</p>\n        </div>\n      );\n    }\n    case 'partiesLoaded': {\n      gameRender = () => (\n        <div className={usernameContainer}>\n          <label>\n            Pseudo :{' '}\n            <input\n              type=\"text\"\n              value={state.context.username}\n              onChange={(e) => send('TYPING', { username: e.target.value })}\n              required\n            />\n          </label>\n          <br />\n          <button className={button} onClick={() => send('PLAY')}>\n            Jouer\n          </button>\n        </div>\n      );\n      break;\n    }\n    case 'playing':\n    case 'revealingFirst':\n    case 'revealingSecond':\n      const { cards, revealedCards } = state.context;\n      const { maximum, seconds } = state.context.clock.state.context;\n      timeRender = () => <span>{maximum - seconds}</span>;\n      gameRender = () => (\n        <div>\n          <div className=\"grid\">\n            {Object.values(cards).map((card, i) => (\n              <Card\n                key={i}\n                back={'card-' + card.name}\n                flipped={revealedCards[card.id]}\n                onClick={() => {\n                  if (!revealedCards[card.id]) {\n                    send('REVEAL', card);\n                  }\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      );\n      break;\n    case 'winning':\n    case 'waitWinning': {\n      gameRender = () => (\n        <div>Winner ! Sauvegarde de la partie en cours ...</div>\n      );\n      break;\n    }\n    case 'won':\n      gameRender = () => (\n        <div>\n          Well done ! <br />\n          <button className={button} onClick={() => send('RETRY')}>\n            Recommencer ?\n          </button>\n        </div>\n      );\n      break;\n    case 'lost':\n      gameRender = () => (\n        <div>\n          Times Up! Perdu ... :( <br />\n          <button className={button} onClick={() => send('RETRY')}>\n            Recommencer ?\n          </button>\n        </div>\n      );\n      break;\n  }\n  return (\n    <div className=\"game-container\">\n      <div className=\"leaderboard\">\n        <Leaderboard parties={state.context.parties} />\n      </div>\n      <div className=\"timer\">\n        <div className=\"time\">{timeRender()} </div>\n        <div className=\"progress\">\n          <Progress value={state.context.progress} />\n        </div>\n      </div>\n      <div className=\"game\">{gameRender()}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Game } from './game/Game';\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}